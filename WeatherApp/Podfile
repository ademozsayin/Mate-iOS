# Uncomment the next line to define a global platform for your project
platform :ios, '15.0'

workspace 'WeatherApp.xcworkspace'

## Pods shared between all the targets
## =====================================

def hud
  pod 'SVProgressHUD', :git => 'https://github.com/SVProgressHUD/SVProgressHUD.git'
end

def keychain
  pod 'KeychainAccess'
end

def alamofire
  pod 'Alamofire'
end

def cocoa_lumberjack
  pod 'CocoaLumberjack'
  pod 'CocoaLumberjack/Swift'
end

def networking_pods
  alamofire
  cocoa_lumberjack

  pod 'Sourcery', '~> 1.0.3', configuration: 'Debug'

  # Used for storing application password
  keychain
end

# Main Target!
# ============
#

target 'WeatherApp' do
  project 'WeatherApp.xcodeproj'

  # Comment the next line if you don't want to use dynamic frameworks
  use_frameworks!

  # Pods for WeatherApp
  # External Libraries
  # ==================
  #
  alamofire
  cocoa_lumberjack
  keychain
  hud
  pod 'Kingfisher', '~> 7.6.2'
  pod 'Wormholy', '~> 1.6.6', configurations: ['Debug']

  target 'WeatherAppTests' do
    inherit! :search_paths
    # Pods for testing
  end

  target 'WeatherAppUITests' do
    # Pods for testing
  end

end

# Networking Target:
# ==================
#
target 'Networking' do
  project '../Networking/Networking.xcodeproj'
  networking_pods
end

# Unit Tests
# ==========
#
target 'NetworkingTests' do
  project '../Networking/Networking.xcodeproj'
end

# Components Target:
# ==================
#
target 'Components' do
  project '../Components/Components.xcodeproj'
  hud
  alamofire
end

# Unit Tests
# ==========
#
target 'ComponentsTests' do
  project '../Components/Components.xcodeproj'
end

# Workarounds:
# ============
#

def remove_duplicated_frameworks(app_pod_name, installer)
    test_targets = get_test_targets(app_pod_name, installer)
    puts "Detected test targets: #{test_targets}"

    puts "Removing duplicated frameworks from OTHER_LDFLAGS"
    targets = installer.aggregate_targets.select { |x| !test_targets.include?(x.name) }

    # Checks each pair of targets if they have common pods. Duplicates are removed from the first one's xcconfig.
    for i in 0..targets.size-1 do
        target = targets[i]
        remainingAppPodTargets = targets[i+1..targets.size-1].flat_map(&:pod_targets)

        target.xcconfigs.each do |config_name, config_file|
            # Removes all frameworks which exist in other pods
            remainingAppPodTargets
                .flat_map { |pod_target| get_framework_names(pod_target) }
                .each { |framework| config_file.frameworks.delete(framework) }

            # Saves updated xcconfig
            xcconfig_path = target.xcconfig_path(config_name)
            config_file.save_as(xcconfig_path)
        end
    end
end

def get_test_targets(app_pod_name, installer)
    main_target_name = app_pod_name.gsub("Pods-", "")

    installer.aggregate_targets
        .find { |x| x.name == app_pod_name }
        .user_project
        .targets
        .select { |x| x.test_target_type? }
        .flat_map { |x| ["Pods-#{x}", "Pods-#{main_target_name}-#{x}"] }
        .select { |x| installer.aggregate_targets.map(&:name).include?(x) }
        .uniq
end

def get_framework_names(pod_target)
    frameworkNames = pod_target.specs.flat_map do |spec|
        # We should take framework names from 'vendored_frameworks'.
        # If it's not defined, we use 'spec.name' instead.
        #
        # spec.name can be defined like Framework/Something - we take the first part
        # because that's what appears in OTHER_LDFLAGS.
        frameworkPaths = unless spec.attributes_hash['ios'].nil?
            then spec.attributes_hash['ios']['vendored_frameworks']
            else spec.attributes_hash['vendored_frameworks']
            end || [spec.name.split(/\//, 2).first]

        map_paths_to_filenames(frameworkPaths)
    end

    frameworkNames.uniq
end

def map_paths_to_filenames(paths)
    Array(paths).map(&:to_s).map do |filename|
        extension = File.extname filename
        File.basename filename, extension
    end
end


post_install do |installer|
    remove_duplicated_frameworks('Pods-WeatherApp', installer)
end
